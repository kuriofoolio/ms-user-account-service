user account controller

// @PostMapping("/houses")
        // public ResponseEntity<UserAccountResponseDTO> createHouseDetails(
        //                 @RequestBody HouseRequestDTO houseRequestDTO) throws URISyntaxException {

        //         return userAccountService.createHouseDetails(houseRequestDTO);

        // }

user account model 
   // @ManyToOne
    // @JoinColumn(name = "houseid", referencedColumnName = "houseid", foreignKey = @jakarta.persistence.ForeignKey(name = "fk_houseid"))
    // private House house; 

    // @ManyToOne(targetEntity = House.class, fetch = FetchType.LAZY)
    // @JoinColumn(name = "house_name", referencedColumnName = "house_name",
    // nullable = false)

    // private House house;


    service 

    private HouseRepository houseRepository;
     
          @Autowired
        public void setRepository(HouseRepository houseRepository) {
                this.houseRepository = houseRepository;

        }



        // public ResponseEntity<UserAccountResponseDTO> createHouseDetails(HouseRequestDTO houseRequestDTO)
        //                 throws URISyntaxException {
        //         House house = House.builder()
        //                         .houseName(houseRequestDTO.getHousename())
        //                         .build();

        //         House newHouse = houseRepository.save(house);

        //         UserAccountResponseDTO userAccountResponseDTO = UserAccountResponseDTO.builder()
        //                         .responseCode(1000)
        //                         .responseDescription("success")
        //                         .responseSummary("House added successfully")
        //                         .build();

        //         return ResponseEntity.created(new URI("/api/v1/houses/" + newHouse.getHouseId()))
        //                         .body(userAccountResponseDTO);

        // }


        within addUserAccount() 
           // Resolve House object from houseId
                // House house = houseRepository.findById(userAccountRequest.getHouseid())
                //                 .orElseThrow(() -> new HouseNotFoundException(userAccountRequest.getHouseid()));

  // .house(house) // Set resolved House object

  


  # docker-compose up -d
  # curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" 127.0.0.1:8083/connectors --data "@debezium.json" 




# docker run --tty --network ms-spring-boot-debezium-master-slave_default confluentinc/cp-enterprise-kafka:6.2.1 kafka-console-consumer --bootstrap-serverkafka:9092 --topic postgres.public.employee --from-beginning

https://kafka.apache.org/quickstart